name: Validate Repo Version
description: Action that validates that a version in `config/versions.json` matches the version in the repository
inputs:
  repo-to-check:
    type: string
    required: true
    description: ACCESS-NRI repository to validate associated version in `config/versions.json`
outputs:
  version:
    value: ${{ steps.jq.outputs.version }}
    description: Version of `inputs.repo-to-check` from the `config/versions.json`
runs:
  using: composite
  steps:
    # Checkout the callers `config/versions.json`
    - uses: actions/checkout@v4

    # Get the version from the `config/versions.json`
    - name: Setup
      id: jq
      shell: bash
      run: |
        version=$(jq --compact-output --raw-output '."${{ inputs.repo-to-check }}"' ./config/versions.json)

        if [[ "${version}" == "null" ]]; then
          echo "::error::There is no `${{ inputs.repo-to-check }}` in `./config/versions.json`"
          exit 1
        fi

        # We omit the 'releases/v' from the spack branch in versions.json, so we add it back here.
        if [[ "${{ inputs.repo-to-check }}" == "spack" ]]; then
          echo "version=releases/v${version}" >> $GITHUB_OUTPUT
        else
          echo "version=${version}" >> $GITHUB_OUTPUT
        fi

    # Verify that the repository exists at the given ref
    - name: Version Check
      id: check
      uses: actions/checkout@v4
      with:
        repository: access-nri/${{ inputs.repo-to-check }}
        ref: ${{ steps.jq.outputs.version }}
        path: repo

    - name: Version Check Failure Notifier
      if: failure() && steps.check.outcome == 'failure'
      shell: bash
      run: |
        echo "::error::`${{ inputs.repo-to-check }}` at the specified ref (`${{ steps.jq.outputs.version }}`) doesn't exist."
        exit 1
