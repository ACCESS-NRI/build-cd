name: Config Settings Deployment
on:
  workflow_call:
    inputs:
      deployment-environment:
        type: string
        required: true
        description: GitHub Deployment Environment Name
      spack-type:
        type: string
        required: true
        description: The type of spack deployment (eg. Prerelease, Release)
env:
  CONFIG_SETTINGS_PATH: ./config/settings.json
jobs:
  update-environment:
    name: Update ${{ inputs.deployment-environment }} ${{ inputs.spack-type }} Settings
    runs-on: ubuntu-latest
    environment: ${{ inputs.deployment-environment }} ${{ inputs.spack-type }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup spack updates
        id: spack
        # TODO: Since we can't format this json as an input for this job (see the earlier workflow) we need to do it here
        run: |
          updates=$(jq --compact-output --raw-output \
            --arg env "${{ inputs.deployment-environment }}" \
            --arg type "${{ inputs.spack-type }}" \
            '.deployment[$env][$type].spack' \
            ${{ env.CONFIG_SETTINGS_PATH }}
          )
          versions=$(jq --compact-output --raw-output \
            --arg env "${{ inputs.deployment-environment }}" \
            --arg type "${{ inputs.spack-type }}" \
            '.deployment[$env][$type].spack | keys | @sh' \
            ${{ env.CONFIG_SETTINGS_PATH }}
          )

          echo "$updates"
          echo "$versions"

          echo "updates=$updates" >> $GITHUB_OUTPUT
          echo "versions=$versions" >> $GITHUB_OUTPUT

      - name: Setup SSH
        id: ssh
        uses: access-nri/actions/.github/actions/setup-ssh@main
        with:
          hosts: ${{ secrets.HOST }}
          private-key: ${{ secrets.SSH_KEY }}

      - name: Update
        continue-on-error: true
        run: |
          ssh ${{ secrets.USER}}@${{ secrets.HOST }} -i ${{ steps.ssh.outputs.private-key-path }} /bin/bash <<'EOT'
          set +e
          for version in ${{ steps.spack.outputs.versions }}; do
            new_commit=$(jq --compact-output --raw-output \
              --arg v "$version" \
              --arg env "${{ inputs.deployment-environment }}" \
              --arg type "${{ inputs.spack-type }}" \
              '.deployment[$env][$type].spack[$v]' \
              ${{ env.CONFIG_SETTINGS_PATH }}
            )
            current_head_commit=$(git -C ${{ secrets.SPACK_INSTALLS_ROOT_LOCATION }}/$version/spack rev-parse HEAD)
            if [ $? -eq 128 ]; then
              # FIXME: Deploy spack instances in this job too.
              echo "::error::Error: ${{ inputs.deployment-environment }} ${{ inputs.spack-type }} $version spack does not exist. Deploy it via build-cds Create Deployment Spack workflow first."
              continue
            fi

            git -C ${{ secrets.SPACK_INSTALLS_ROOT_LOCATION }}/$version/spack fetch

            if [[ "$current_head_commit" != "$new_commit" ]]; then
              git -C ${{ secrets.SPACK_INSTALLS_ROOT_LOCATION }}/$version/spack checkout $new_commit
              if [ $? -ne 0 ]; then
                echo "::error::Error: ${{ inputs.deployment-environment }} ${{ inputs.spack-type }} $version spack failed checkout from $current_head_commit to $new_commit"
              else
                echo "::notice::Changed: ${{ inputs.deployment-environment }} ${{ inputs.spack-type }} $version spack changed from $current_head_commit to $new_commit"
              fi
            else
              echo "::notice::Unchanged: ${{ inputs.deployment-environment }} ${{ inputs.spack-type }} $version spack left at $current_head_commit"
            fi
          done
          EOT
