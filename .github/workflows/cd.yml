name: CD
run-name: ${{ inputs.model }} CD
# NOTE: This workflow requires:
# permissions.contents:write
# secrets:inherit with an appropriate GitHub Environment for deployment in the caller
on:
  workflow_call:
    inputs:
      model:
        type: string
        required: true
        description: The model that is being tested and deployed
      root-sbd:
        type: string
        required: false
        # default: The ${{ inputs.model }} above
        description: |
          The name of the root Spack Bundle Definition, if it is different from the model name.
          This is often a package named similarly in ACCESS-NRI/spack-packages.
  # Callers usually have the trigger:
  # push:
  #   branches:
  #     - main
  #     - backport/*.*
  #   paths:
  #     - config/**
  #     - spack.yaml

env:
  # This attempts to get the spack.yaml model first via the multi-target
  # .spack.definitions.root_package method, then the traditional '.spack.specs[0]'.
  SPACK_YAML_MODEL_YQ: (.spack.definitions[] | select(."ROOT_PACKAGE") | .[][]) // .spack.specs[0]
  METADATA_PATH: /opt/metadata
  OUTPUTS_PATH: /opt/outputs
jobs:
  defaults:
    name: Set Defaults
    # Unfortunately, you can't set a dynamic default value based on `inputs` yet
    runs-on: ubuntu-latest
    outputs:
      root-sbd: ${{ steps.root-sbd.outputs.default }}
      targets: ${{ steps.target.outputs.matrix }}
    steps:
      - name: root-sbd
        id: root-sbd
        run: |
          if [ -z "${{ inputs.root-sbd }}" ]; then
            echo "default=${{ inputs.model }}" >> $GITHUB_OUTPUT
          else
            echo "default=${{ inputs.root-sbd }}" >> $GITHUB_OUTPUT
          fi

      - name: Get deployment settings.json
        uses: actions/checkout@v4
        with:
          repository: access-nri/build-cd
          ref: main

      - name: Generate Deployment Target Matrix
        id: target
        # These are used in the deploy job to determine the targets to deploy to - irrespective of the type of deployment.
        # We use the list of valid targets (from build-cd) and targets set in the caller repository to determine the final list.
        run: |
          valid_targets=$(jq --raw-output --compact-output \
            '.deployment | keys' \
            config/settings.json
          )
          repo_release_targets=$(jq --null-input --raw-output --compact-output \
            --arg valids "${{ vars.RELEASE_DEPLOYMENT_TARGETS }}" \
            '$valids | split(" ")'
          )
          targets=$(jq --null-input --raw-output --compact-output\
            --argjson valid "$valid_targets" \
            --argjson ours "$repo_release_targets" \
            '$valid - ($valid - $ours)'
          )

          echo "From build-cd's valid targets: $valid_targets, and ${{ github.repository }}s chosen targets: $repo_release_targets, we will deploy to $targets"
          echo "targets=$targets" >> $GITHUB_OUTPUT

  verify-settings:
    name: Verify Deployment Settings
    runs-on: ubuntu-latest
    needs:
      - defaults
    strategy:
      matrix:
        target: ${{ fromJson(needs.defaults.outputs.targets) }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ACCESS-NRI/build-cd
          ref: main

      - uses: access-nri/build-cd/.github/actions/validate-deployment-settings@main
        with:
          settings-path: ./config/settings.json
          target: ${{ matrix.target }}
          error-level: error

  push-tag:
    name: Tag Deployment
    runs-on: ubuntu-latest
    needs:
      - verify-settings
    permissions:
      contents: write
    outputs:
      name: ${{ steps.tag.outputs.name }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate Tag
        id: tag
        # Get the tag name from the `spack.yaml` that was merged into main, which
        # is of the form `<model>@git.<version>`.
        run: echo "name=$(yq '${{ env.SPACK_YAML_MODEL_YQ }} | split("@git.") | .[1]' spack.yaml)" >> $GITHUB_OUTPUT

      - name: Import Commit-Signing Key
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4  # v6.1.0
        with:
          gpg_private_key: ${{ secrets.GH_ACTIONS_BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GH_ACTIONS_BOT_GPG_PASSPHRASE }}
          git_config_global: true
          git_committer_name: ${{ vars.GH_ACTIONS_BOT_GIT_USER_NAME }}
          git_committer_email: ${{ vars.GH_ACTIONS_BOT_GIT_USER_EMAIL }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Push Tag
        env:
          TAG: ${{ steps.tag.outputs.name }}
        run: |
          git tag ${{ env.TAG }} -m "Deployment of ${{ inputs.model }} ${{ env.TAG }} via build-cd 'cd.yml' workflow"
          git push --tags

  deploy-release:
    name: Deploy Release
    needs:
      - defaults
      - push-tag
    strategy:
      matrix:
        target: ${{ fromJson(needs.defaults.outputs.targets) }}
    uses: access-nri/build-cd/.github/workflows/deploy-1-setup.yml@v3
    with:
      deployment-target: ${{ matrix.target }}
      deployment-ref: ${{ github.ref_name }}
      deployment-type: Release
      deployment-version: ${{ needs.push-tag.outputs.name }}
      spack-manifest-path: ./spack.yaml
      spack-manifest-root-sbd: ${{ needs.defaults.outputs.root-sbd }}
    secrets: inherit
    permissions:
      contents: write

  release:
    name: Create Release
    needs:
      - defaults
      - push-tag
      - deploy-release
    runs-on: ubuntu-latest
    env:
      TEMPLATED_RELEASE_BODY_PATH: /opt/release-body.md
    outputs:
      url: ${{ steps.release.outputs.url }}
      created-at: ${{ steps.metadata.outputs.created-at }}
    steps:
      - name: Checkout build-cd
        uses: actions/checkout@v4
        with:
          repository: access-nri/build-cd
          ref: v3

      - name: Download Metadata Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ needs.deploy-release.outputs.general-metadata-artifact-glob }}
          path: ${{ env.METADATA_PATH }}
          merge-multiple: true

      - name: Download Outputs Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ needs.deploy-release.outputs.general-outputs-artifact-glob }}
          path: ${{ env.OUTPUTS_PATH }}
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: pip

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -q -q -r scripts/jinja_template/requirements.txt

      - name: Generate Release Notes
        id: release-body
        env:
          J2_MODEL: ${{ inputs.model }}
          J2_VERSION: ${{ needs.push-tag.outputs.name }}
          J2_ROOT_SBD: ${{ needs.defaults.outputs.root-sbd }}
        run: |
          python -m scripts.jinja_template.render_deployment_info \
            --template scripts/jinja_template/templates/release-body.md.j2 \
            --deployment-outputs ${{ env.OUTPUTS_PATH }} \
            --output ${{ env.TEMPLATED_RELEASE_BODY_PATH }}

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@69320dbe05506a9a39fc8ae11030b214ec2d1f87  # v2.0.5
        with:
          tag_name: ${{ needs.push-tag.outputs.name }}
          name: ${{ inputs.model}} ${{ needs.push-tag.outputs.name }}
          body_path: ${{ env.TEMPLATED_RELEASE_BODY_PATH }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            ${{ env.METADATA_PATH }}/*.spack.yaml
            ${{ env.METADATA_PATH }}/*.spack.lock
            ${{ env.METADATA_PATH }}/*.spack.location
            ${{ env.METADATA_PATH }}/*.spack.location.json

      - name: Release Metadata
        id: metadata
        env:
          GH_TOKEN: ${{ github.token }}
        run: echo "created-at=$(gh release view --json createdAt --jq '.createdAt' --repo ${{ github.repository }})" >> $GITHUB_OUTPUT

  # FIXME: This won't work until ACCESS-NRI/build-cd#201 is resolved
  build-db:
    name: Build DB Metadata Upload
    needs:
      - deploy-release
      - release
    runs-on: ubuntu-latest
    steps:
      - name: Download Metadata Artifact
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ needs.deploy-release.outputs.general-metadata-artifact-glob }}
          path: ${{ env.METADATA_PATH }}

      - name: Checkout Upload Script
        uses: actions/checkout@v4
        with:
          repository: access-nri/build-cd

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
          cache: pip

      - name: Install Build Metadata Script Requirements
        run: pip install -r tools/release_provenance/requirements.txt

      - name: Upload Build Metadata
        env:
          BUILD_DB_CONNECTION_STR: ${{ secrets.BUILD_DB_CONNECTION_STR }}
          OUTPUT_PATH: ./metadata_output
        run: |
          ./scripts/generate-build-metadata.bash ${{ needs.release.outputs.url }} ${{ needs.release.outputs.created-at }} ${{ needs.deploy-to-environment.outputs.packages-version }} ${{ needs.deploy-to-environment.outputs.config-version }} ${{ env.METADATA_PATH }} ${{ env.OUTPUT_PATH }} ${{ inputs.root-sbd }} ${{ vars.BUILD_DB_PACKAGES }}

          echo "Attempting upload of build_metadata.json"
          python ./tools/release_provenance/save_release.py "${{ env.OUTPUT_PATH }}/build_metadata.json"
